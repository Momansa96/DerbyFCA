datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
}

model Player {
  id                String   @id @default(uuid())
  fullName          String
  alias             String?
  bureauRole        String?
  profilePhoto      String?
  preferredPosition String?
  description       String?
  number            Int?
  status            String   @default("ACTIF")
  joinDate          DateTime @default(now())
  email             String?
  phone             String?
  teams             Team[]
  goals             Goal[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Team {
  id           String   @id @default(uuid())
  name         String
  players      Player[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  team1Derbys  Derby[]  @relation("Team1Derbys")
  team2Derbys  Derby[]  @relation("Team2Derbys")
  team1Matches Match[]  @relation("Team1Matches")
  team2Matches Match[]  @relation("Team2Matches")
  goals        Goal[]
}

model Derby {
  id        String   @id @default(uuid())
  team1     Team     @relation("Team1Derbys", fields: [team1Id], references: [id])
  team1Id   String
  team2     Team     @relation("Team2Derbys", fields: [team2Id], references: [id])
  team2Id   String
  matches   Match[]
  status    String   @default("PENDING")
  winnerId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id        String   @id @default(uuid())
  date      DateTime
  team1     Team     @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id   String
  team2     Team     @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id   String
  derby     Derby    @relation(fields: [derbyId], references: [id])
  derbyId   String
  score1    Int?
  score2    Int?
  status    String   @default("PENDING")
  winnerId  String?
  goals     Goal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id        String   @id @default(uuid())
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId   String
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  isOwnGoal Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([matchId])
  @@index([playerId])
  @@index([teamId])
}

model FriendlyMatch {
  id        String   @id @default(uuid())
  type      String   // Amical, Exhibition, etc.
  date      String   // format : YYYY-MM-DD
  time      String   // format : HH:MM
  location  String   // exemple : Stade Gbegamey
  place     String   // Domicile ou Extérieur
  opponent  String   // Nom de l'équipe adverse
  createdAt DateTime @default(now())
}
